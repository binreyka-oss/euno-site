
document.addEventListener('DOMContentLoaded', () => {

    // --- Ticker Slogan Animation ---
    const sloganContainer = document.getElementById('slogans-container');
    if (sloganContainer && window.matchMedia("(min-width: 769px)").matches) {
        const slogans = [
            "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤—ã—Ä–∞—Å—Ç–∏", "—Ç—ã –∑–Ω–∞–µ—à—å –≤–∞–∂–Ω–æ—Å—Ç—å eNPS", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –∏–¥–µ–∏", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –±—Ä–µ–Ω–¥–∞", 
            "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–º—ã—Å–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "—Ç—ã –∑–Ω–∞–µ—à—å –≥–¥–µ —Ç–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã", "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤–ª–∏—è—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", 
            "—Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Ü–µ–ø–ª—è–µ—Ç", "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ —É–±–µ–∂–¥–∞—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –≤–∞–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º", "—Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–≤–∏–≥–∞–µ—Ç —Ä—ã–Ω–æ–∫", 
            "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –ª—é–¥–µ–π", "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ–º",
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ä–æ–∂–¥–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–µ–Ω–¥ –∂–∏–≤—ã–º", "—Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –≤—ã–∑–≤–∞—Ç—å ¬´–≤–∞—É¬ª", 
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ä–æ–∂–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é", "—Ç—ã –∑–Ω–∞–µ—à—å, –≥–¥–µ —Å–∫—Ä—ã—Ç–∞ –º–∞–≥–∏—è", 
            "—Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —É–¥–µ—Ä–∂–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –±–µ—Ä–µ—Ç –∑–∞ –¥—É—à—É",
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –º–∏—Ä –ª—É—á—à–µ"
        ];
        
        const numColumns = 7;
        for (let i = 0; i < numColumns; i++) {
            const column = document.createElement('div');
            column.className = 'slogan-column';
            
            // Shuffle and slice slogans for variety in each column
            const shuffledSlogans = [...slogans].sort(() => 0.5 - Math.random());
            const columnSlogans = shuffledSlogans.slice(0, 15);

            // Duplicate slogans for infinite scroll effect
            const columnContent = [...columnSlogans, ...columnSlogans];
            
            columnContent.forEach(text => {
                const span = document.createElement('span');
                span.textContent = text;
                column.appendChild(span);
            });
            sloganContainer.appendChild(column);
        }
    }

    // --- Emoji Cursor Trail ---
    const foodEmojis = ['üçï', 'üçî', 'üçü', 'üç£', 'üç©', 'üç¶', 'üç™', 'ü•ë', 'üåÆ', 'üçì', 'üçâ', 'üçá', 'üçé', 'ü•ï', 'ü•¶', '‚òïÔ∏è', 'üçπ', 'üç∫', 'üç∑', 'üç∞', 'üçø', 'ü•ê'];
    let canCreateTrail = true;
    
    document.addEventListener('mousemove', e => {
        if (canCreateTrail) {
            canCreateTrail = false;
            const trail = document.createElement('div');
            trail.className = 'cursor-trail';
            trail.textContent = foodEmojis[Math.floor(Math.random() * foodEmojis.length)];
            trail.style.left = `${e.clientX}px`;
            trail.style.top = `${e.clientY}px`;
            
            document.body.appendChild(trail);

            setTimeout(() => {
                trail.remove();
            }, 1000); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

            setTimeout(() => {
                canCreateTrail = true;
            }, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        }
    });


    // --- Burger Menu ---
    const burger = document.getElementById('burger-menu');
    const mobileNav = document.getElementById('mobile-nav');
    const navLinks = mobileNav.querySelectorAll('a');

    if (burger && mobileNav) {
        burger.addEventListener('click', () => {
            burger.classList.toggle('active');
            mobileNav.classList.toggle('active');
            document.body.classList.toggle('no-scroll');
        });

        navLinks.forEach(link => {
            link.addEventListener('click', () => {
                burger.classList.remove('active');
                mobileNav.classList.remove('active');
                document.body.classList.remove('no-scroll');
            });
        });
    }


    // --- Interactive Process Tabs ---
    const tabs = document.querySelectorAll('.process-tab');
    const contents = document.querySelectorAll('.process-content');
    const progressBarFill = document.getElementById('progressBarFill');

    if (tabs.length > 0 && contents.length > 0 && progressBarFill) {
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const phase = tab.dataset.phase;
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                contents.forEach(c => c.classList.remove('active'));
                document.querySelector(`.process-content[data-phase="${phase}"]`).classList.add('active');
                progressBarFill.style.width = `${parseInt(phase) * 20}%`;
            });
        });
    }

    // --- Form Submission ---
    const leadForm = document.getElementById('lead-form');
    if (leadForm) {
        leadForm.addEventListener('submit', e => {
            e.preventDefault();
            const submitButton = leadForm.querySelector('button[type="submit"]');
            sendLead(e.target, submitButton);
        });
    }
    
    const sendLead = async (form, button) => {
        const formData = Object.fromEntries(new FormData(form).entries());
        if (!formData.consent) {
            alert('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
            return;
        }
        const originalButtonText = button.textContent;
        button.disabled = true;
        button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        try {
            // –í–ê–ñ–ù–û: '/api/lead' - —ç—Ç–æ –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. 
            // Vercel –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ /api –∫–∞–∫ serverless-—Ñ—É–Ω–∫—Ü–∏–∏.
            const res = await fetch('/api/lead', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            if (res.ok) {
                alert('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.');
                form.reset();
            } else {
                alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
            }
        } catch (err) {
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ GitHub Pages –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å try-catch –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å alert
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:", err);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏. –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.');
            form.reset();
        } finally {
            button.disabled = false;
            button.textContent = originalButtonText;
        }
    };

});
