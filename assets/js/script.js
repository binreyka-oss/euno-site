
document.addEventListener('DOMContentLoaded', () => {

    // --- Floating Slogan Bubbles ---
    const sloganContainer = document.getElementById('slogans-container');
    if (sloganContainer && window.matchMedia("(min-width: 769px)").matches) {
        const slogans = [
            "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤—ã—Ä–∞—Å—Ç–∏", "—Ç—ã –∑–Ω–∞–µ—à—å –≤–∞–∂–Ω–æ—Å—Ç—å eNPS", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –∏–¥–µ–∏", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –±—Ä–µ–Ω–¥–∞", 
            "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–º—ã—Å–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "—Ç—ã –∑–Ω–∞–µ—à—å –≥–¥–µ —Ç–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –∫–æ–º–∞–Ω–¥—ã", "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤–ª–∏—è—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ", 
            "—Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ —Ü–µ–ø–ª—è–µ—Ç", "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ —É–±–µ–∂–¥–∞—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –≤–∞–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç–∞–º", "—Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–≤–∏–≥–∞–µ—Ç —Ä—ã–Ω–æ–∫", 
            "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –ª—é–¥–µ–π", "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ–º",
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ä–æ–∂–¥–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–µ–Ω–¥ –∂–∏–≤—ã–º", "—Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –≤—ã–∑–≤–∞—Ç—å ¬´–≤–∞—É¬ª", 
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Ä–æ–∂–¥–∞–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é", "—Ç—ã –∑–Ω–∞–µ—à—å, –≥–¥–µ —Å–∫—Ä—ã—Ç–∞ –º–∞–≥–∏—è", 
            "—Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ —É–¥–µ—Ä–∂–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –±–µ—Ä–µ—Ç –∑–∞ –¥—É—à—É",
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –º–∏—Ä –ª—É—á—à–µ", "—Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞—Å–ª–µ–¥–∏–µ",
            "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ä–¥–∏—Ç—å—Å—è", "—Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –º–∏—Ä", "—Ç—ã –∑–Ω–∞–µ—à—å, –≥–¥–µ –ª–µ–∂–∏—Ç –∏—Å—Ç–∏–Ω–∞",
            "—Ç—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –Ω–∞–π—Ç–∏ –ø—É—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–≤–∏–∂–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º", "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤—ã—Ä–∞—Å—Ç–∏", "—Ç—ã –∑–Ω–∞–µ—à—å –≤–∞–∂–Ω–æ—Å—Ç—å eNPS", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–π –ø—É—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –∏–¥–µ–∏", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–∏–ª—É –±—Ä–µ–Ω–¥–∞", 
            "—Ç—ã –∑–Ω–∞–µ—à—å –∫–∞–∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–º—ã—Å–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π", "—Ç—ã –∑–Ω–∞–µ—à—å —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        ];
        const bubbles = [];

        const headline = document.getElementById('main-headline');
        const deadZoneRect = headline.getBoundingClientRect();
        const deadZone = {
            top: deadZoneRect.top - 100,
            right: deadZoneRect.right + 100,
            bottom: deadZoneRect.bottom + 100,
            left: deadZoneRect.left - 100,
        };

        slogans.forEach(sloganText => {
            const span = document.createElement('div');
            span.className = 'slogan-bubble';
            span.textContent = sloganText;
            
            const size = 120 + Math.random() * 50; // Smaller bubbles
            const bubble = {
                element: span,
                x: 0,
                y: 0,
                vx: (Math.random() - 0.5) * 0.45, // 1.5x faster
                vy: (Math.random() - 0.5) * 0.45, // 1.5x faster
                size: size,
                radius: size / 2
            };
            
            do {
                bubble.x = Math.random() * sloganContainer.offsetWidth;
                bubble.y = Math.random() * sloganContainer.offsetHeight;
            } while (
                bubble.x + size > deadZone.left && bubble.x < deadZone.right &&
                bubble.y + size > deadZone.top && bubble.y < deadZone.bottom
            );

            span.style.width = `${size}px`;
            span.style.height = `${size}px`;
            sloganContainer.appendChild(span);
            bubbles.push(bubble);
        });

        function animateBubbles() {
            bubbles.forEach((bubble, i) => {
                // Movement
                bubble.x += bubble.vx;
                bubble.y += bubble.vy;

                // Wall collision
                if (bubble.x < 0 || bubble.x > sloganContainer.offsetWidth - bubble.size) bubble.vx *= -1;
                if (bubble.y < 0 || bubble.y > sloganContainer.offsetHeight - bubble.size) bubble.vy *= -1;

                // Bubble-to-bubble collision
                for (let j = i + 1; j < bubbles.length; j++) {
                    const otherBubble = bubbles[j];
                    const dx = otherBubble.x - bubble.x;
                    const dy = otherBubble.y - bubble.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    const minDistance = bubble.radius + otherBubble.radius;

                    if (distance < minDistance) {
                        // Simple velocity swap for elastic collision effect
                        [bubble.vx, otherBubble.vx] = [otherBubble.vx, bubble.vx];
                        [bubble.vy, otherBubble.vy] = [otherBubble.vy, bubble.vy];
                    }
                }
                bubble.element.style.transform = `translate(${bubble.x}px, ${bubble.y}px)`;
            });
            requestAnimationFrame(animateBubbles);
        }
        animateBubbles();
    }


    // --- Cursor Trail ---
    const cursorArea = document.querySelector('.custom-cursor-area');
    if (cursorArea && window.matchMedia("(min-width: 769px)").matches) {
        const foodIcons = ['üçé', 'üçû', 'ü•ï', 'üçá', 'üçå', 'üçï', 'üçî', 'üç£', 'üå≠', 'üåÆ', 'üçü', 'üç≤', 'ü¶ê', 'üç©', 'üç∞', 'ü•ó', 'ü•™', 'ü•û'];
        let moveCounter = 0;
        
        window.addEventListener('mousemove', e => {
            moveCounter++;
            if (moveCounter % 4 === 0) { // Middle-ground frequency
                const trail = document.createElement('div');
                trail.className = 'cursor-trail';
                trail.innerHTML = foodIcons[Math.floor(Math.random() * foodIcons.length)];
                document.body.appendChild(trail);

                trail.style.left = `${e.clientX}px`;
                trail.style.top = `${e.clientY}px`;
                
                const startRotation = Math.random() * 90 - 45;
                const endRotation = startRotation + Math.random() * 60 - 30;
                trail.style.transform = `translate(-50%, -50%) rotate(${startRotation}deg) scale(1)`;

                setTimeout(() => {
                    trail.style.opacity = '0';
                    trail.style.transform = `translate(-50%, -50%) rotate(${endRotation}deg) scale(0)`;
                    setTimeout(() => {
                        trail.remove();
                    }, 1200); // Longer disappearance time
                }, 100); 
            }
        });
    }


    // --- Interactive Process Tabs ---
    const tabs = document.querySelectorAll('.process-tab');
    const contents = document.querySelectorAll('.process-content');
    const progressBarFill = document.getElementById('progressBarFill');

    if (tabs.length > 0 && contents.length > 0 && progressBarFill) {
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                const phase = tab.dataset.phase;
                tabs.forEach(t => t.classList.remove('active'));
                tab.classList.add('active');
                contents.forEach(c => c.classList.remove('active'));
                document.querySelector(`.process-content[data-phase="${phase}"]`).classList.add('active');
                progressBarFill.style.width = `${parseInt(phase) * 20}%`;
            });
        });
    }

    // --- Modal Logic & Form Submission ---
    const modal = document.getElementById('modal');
    if (modal) {
        const openModalButtons = document.querySelectorAll('[data-open-modal]');
        const closeModalButtons = document.querySelectorAll('[data-close-modal]');
        openModalButtons.forEach(button => button.addEventListener('click', () => modal.style.display = 'flex'));
        closeModalButtons.forEach(button => button.addEventListener('click', () => modal.style.display = 'none'));
        window.addEventListener('click', event => { if (event.target === modal) modal.style.display = 'none'; });
    }
    
    const sendLead = async (form, button) => {
        const formData = Object.fromEntries(new FormData(form).entries());
        if (!formData.consent) {
            alert('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.');
            return;
        }
        const originalButtonText = button.textContent;
        button.disabled = true;
        button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        try {
            const res = await fetch('/api/lead', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            if (res.ok) {
                alert('–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.');
                form.reset();
                if (modal) modal.style.display = 'none';
            } else {
                alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
            }
        } catch (err) {
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏.');
        } finally {
            button.disabled = false;
            button.textContent = originalButtonText;
        }
    };
    
    document.querySelectorAll('form').forEach(form => {
        form.addEventListener('submit', e => {
            e.preventDefault();
            const submitButton = form.querySelector('button[type="submit"]');
            sendLead(e.target, submitButton);
        });
    });

});
